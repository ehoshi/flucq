Fluctuating-charge code for water and simple ions, dating from SJS doctoral
work in 90s.  No attempt has been made to clean this code up or make it
more user-friendly. Sorry.

To compile:
1) untar the code. Presumably you have already done this.

   $ tar xvf flucq.tar
   $ cd flucq
   $ mysrcdir=`pwd`
   $ mkdir build
   $ cd build
   $ mybuilddir=`pwd`

   (Setting the $mysrcdir and $mybuilddir variables is just so that
   these directions will make sense if typed as written. You don't
   have to use them.)

2) set the FC environment variable to your preferred fortran compiler:

   $ FC=gfortran
   $ export FC

   Do this in your .bashrc file (or equivalent) if you intend to compile the
   code on more than a single occasion.

3) run CMake from the build directory

   $ cd "$mybuilddir"
   $ cmake -D CMAKE_BUILD_TYPE=Release "$mysrcdir"

4) compile the MD code:

   $ make flucq

5) compile the analysis code:

   $ make props

6) copy the input files to a working directory

   $ cd "$mysrcdir"
   $ mydir=~/systems/water   # or wherever you like
   $ cp models.dat eor.begin stdin.test props.in "$mydir"

7) run a simulation
   (On palmetto, you will need to do this and the following steps on a
   compute node, not the head node.)

   $ cd "$mydir"
   $ "$mybuilddir/flucq" <stdin.test

   The $mydir and $mybuilddir variables are only used here to provide
   a command that will work without knowing your machine. Feel free to
   use the actual path and file names.

   This will run a short, 1 ps simulation of 256 TIP4P water molecules,
   and some output should appear on the screen.
   It reads the simulation conditions from standard input (stdin.test in
   this case), the model parameters from models.dat, and the starting
   configuration from the eor.begin file that was named explicitly in
   stdin.test.
   Some output files are also created.
   bonde.test  contains some data on pair energies
   dyn.test    contains the trajectory information and some traces of system
               properties. This file is binary, and is normally read with the
               props program.
   eor.test    is the configuration of the system at the end of the simulation
   simdat.test is a record of the simulation conditions (a copy of what
               was in stdin.test)
   Note that the '.test' suffix was specified in the input (stdin.test) file.

8) analyze the simulation

   $ "$mybuilddir/props" <props.in

   This will analyze the simulation results stored in the dyn.test file.
   The specific analyses to be performed are specified on standard input
   (props.in, here).
   The output files generated depend on the analyses requested, but some
   common ones are:
   eop.test   is a binary file that preserves the state of some of the
              averages, so that they can be cumulatively tracked across later
              simulations
   fulle.test contains traces of various system energies
   gAABB.test is a pair correlation function, g(r), between atom types
              identified by the atomic numbers AA and BB
   press.test contains traces of the system pressure
   props.test contains some simple thermodynamic averages of energy, pressure,
              and temperature
   temps.test contains traces of various system temperatures
